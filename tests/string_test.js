debug.dump("test");
var x = "hello world";
debug.dump(x);
debug.dump('test2');
var a = "val_a", b = "val_b", c = "val_a";
debug.assert(a == b, false);
debug.assert(a == c, true);
var foo = "foo", bar = "bar", foobar = "foobar", out;
out = foo + bar;
debug.assert(out, foobar);
var three = 3;
debug.dump("three=" + three.toString() + "!");
var obj = { g : "g" };
debug.dump("obj=" + obj.toString());
obj.toString = function() { return "toStringOverride!"; };
debug.dump("obj=" + obj.toString());
obj.bla = 3;
var s = "kuku";
s+="poo";
debug.dump(s);
debug.assert(s, "kukupoo");
s = "kuku---gug---bub";
debug.dump(s.prototype);
debug.dump(s.split);
debug.dump(s.split("---"));
debug.assert(s.split("---")[1], "gug");
debug.assert("kuku".split("")[2], "k");
debug.dump("kukugug".split(""));
debug.assert("kukuya".length, 6);
debug.assert("kaku".indexOf("ku"), 2);
debug.assert("012345678".substring(2, 7), "23456");
debug.assert("012345678".substring(2), "2345678");
debug.dump("012345678".substring(2,5));
debug.assert("012345678".charAt(4), "4");
debug.assert("123\n".length, 4);
debug.dump("123\n123");
debug.assert("\n", "\u000a");
var lui = new String("lui");
debug.assert(lui, "lui");
var fui = String("fui");
debug.assert(fui, "fui");
debug.assert("abc"[1], "b");
debug.assert([].map.call("abc", function(x) { return x + 1; })[1], "b1");
